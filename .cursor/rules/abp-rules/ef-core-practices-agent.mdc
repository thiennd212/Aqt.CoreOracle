---
description: 
globs: 
alwaysApply: true
---
---
description: "This rule governs Entity Framework Core implementation in ABP applications. Apply when:
(1) Creating new database contexts
(2) Implementing entity configurations
(3) Writing queries and database operations
(4) Implementing database migrations
(5) Optimizing database performance
(6) Working with transactions
(7) Implementing or modifying repositories
(8) Setting up caching strategies
(9) Working with large datasets
(10) Implementing audit logging"
globs: ""
alwaysApply: true
---

# Entity Framework Core Best Practices

```mermaid
graph LR
    A[Entity] --> B[Repository]
    B --> C[Domain Service]
    C --> D[Application Service]
    E[Unit of Work] --> B
    F[Cache] --> B
    G[Audit Log] --> B
```

## Critical Rules
- Sử dụng async methods (GetAsync, UpdateAsync, etc.) cho tất cả database operations
- Implement proper transaction management với UnitOfWork pattern
- Tránh N+1 query problem bằng cách sử dụng Include và eager loading đúng cách
- Sử dụng EF Core migrations cho database schema management
- Configure entities với Fluent API trong EntityTypeConfiguration classes
- Implement proper indexing cho frequently queried columns
- Sử dụng projection (Select) để lấy chỉ data cần thiết
- Implement soft-delete cho entities với IsDeleted property
- Sử dụng DBContext Factory pattern
- Tránh lazy loading trừ khi cần thiết
- Implement bulk operations cho large datasets
- Tránh raw SQL queries trừ khi performance cần thiết
- Sử dụng second-level cache cho read-heavy data
- Implement audit logging cho tất cả changes
- Sử dụng optimistic concurrency control
- Configure proper connection resiliency
- Implement database sharding cho large datasets
- Sử dụng query tags cho monitoring
- Implement custom value converters khi cần
- Sử dụng global query filters

## Examples

<example>
```csharp
// DbContext with caching and audit logging
[ConnectionStringName("Default")]
public class BookStoreDbContext : AbpDbContext<BookStoreDbContext>
{
    public DbSet<Book> Books { get; set; }
    public DbSet<Author> Authors { get; set; }

    public BookStoreDbContext(DbContextOptions<BookStoreDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        // Configure entities
        builder.ConfigureBookStore();
        
        // Global query filters
        builder.Entity<Book>().HasQueryFilter(b => !b.IsDeleted);
        
        // Audit logging
        builder.Entity<Book>().ConfigureAuditedAggregateRoot();
    }
    
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // Query logging
        optionsBuilder
            .EnableSensitiveDataLogging()
            .EnableDetailedErrors()
            .LogTo(Console.WriteLine, LogLevel.Information)
            .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
            
        // Resilient connections
        optionsBuilder.EnableRetryOnFailure(
            maxRetryCount: 3,
            maxRetryDelay: TimeSpan.FromSeconds(30),
            errorNumbersToAdd: null);
    }
}

// Repository with caching and bulk operations
public class EfCoreBookRepository : EfCoreRepository<BookStoreDbContext, Book, Guid>, IBookRepository
{
    private readonly IDistributedCache<BookCacheItem> _cache;
    private readonly IDistributedCache<AuthorCacheItem> _authorCache;

    public EfCoreBookRepository(
        IDbContextProvider<BookStoreDbContext> dbContextProvider,
        IDistributedCache<BookCacheItem> cache,
        IDistributedCache<AuthorCacheItem> authorCache)
        : base(dbContextProvider)
    {
        _cache = cache;
        _authorCache = authorCache;
    }

    public async Task<Book> GetWithDetailsAsync(Guid id, CancellationToken cancellationToken = default)
    {
        // Try get from cache
        var cacheItem = await _cache.GetAsync(id.ToString(), cancellationToken);
        if (cacheItem != null)
        {
            return ObjectMapper.Map<BookCacheItem, Book>(cacheItem);
        }

        // Get from database with includes
        var dbContext = await GetDbContextAsync();
        var book = await dbContext.Books
            .TagWith("GetBookWithDetails") // Query tag for monitoring
            .Include(b => b.Author)
            .Include(b => b.Categories)
            .FirstOrDefaultAsync(b => b.Id == id, cancellationToken);

        if (book == null)
        {
            return null;
        }

        // Cache the result
        await _cache.SetAsync(
            id.ToString(),
            ObjectMapper.Map<Book, BookCacheItem>(book),
            new DistributedCacheEntryOptions
            {
                AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30)
            },
            cancellationToken
        );

        return book;
    }
    
    public async Task BulkInsertAsync(IEnumerable<Book> books, CancellationToken cancellationToken = default)
    {
        var dbContext = await GetDbContextAsync();
        
        // Configure bulk insert
        await dbContext.BulkInsertAsync(
            books,
            options =>
            {
                options.BatchSize = 1000;
                options.AutoMapOutputDirection = false;
                options.SetOutputIdentity = true;
            },
            cancellationToken
        );
        
        // Invalidate cache
        await _cache.RemoveAsync("all-books", cancellationToken);
    }
}

// Value converter example
public class JsonValueConverter<T> : ValueConverter<T, string>
{
    public JsonValueConverter() : base(
        v => JsonSerializer.Serialize(v, null),
        v => JsonSerializer.Deserialize<T>(v, null))
    {
    }
}

// Entity configuration with optimistic concurrency
public static class BookStoreDbContextModelCreatingExtensions
{
    public static void ConfigureBookStore(this ModelBuilder builder)
    {
        builder.Entity<Book>(b =>
        {
            b.ToTable(BookStoreConsts.DbTablePrefix + "Books", BookStoreConsts.DbSchema);
            b.ConfigureByConvention();
            
            // Properties
            b.Property(x => x.Name)
                .IsRequired()
                .HasMaxLength(128);
            
            // Optimistic concurrency
            b.Property(x => x.ConcurrencyStamp)
                .IsConcurrencyToken()
                .HasMaxLength(40);
            
            // Value converter for JSON property
            b.Property(x => x.ExtraProperties)
                .HasConversion(new JsonValueConverter<Dictionary<string, object>>());
            
            // Indexes
            b.HasIndex(x => x.Name);
            b.HasIndex(x => x.AuthorId);
            
            // Relationships
            b.HasOne<Author>()
                .WithMany()
                .HasForeignKey(x => x.AuthorId)
                .OnDelete(DeleteBehavior.Restrict);
        });
    }
}
```
</example>

<example type="invalid">
```csharp
// Invalid DbContext without proper configuration
public class BadBookDbContext : DbContext
{
    // Missing connection string configuration
    // Missing global query filters
    // Missing audit logging
    // Missing resilient connections
    
    public DbSet<Book> Books { get; set; }
    
    protected override void OnModelCreating(ModelBuilder builder)
    {
        // Missing base configuration
        builder.Entity<Book>(b =>
        {
            // Missing proper configuration
            b.Property(x => x.Name).HasMaxLength(100);
        });
    }
}

// Invalid repository without caching
public class BadBookRepository
{
    private readonly BadBookDbContext _context;
    
    // Direct DbContext usage
    // Missing caching
    // Missing bulk operations
    
    public async Task<Book> GetBookAsync(Guid id)
    {
        // N+1 problem
        var book = await _context.Books.FindAsync(id);
        var author = await _context.Authors.FindAsync(book.AuthorId);
        book.Author = author;
        
        return book;
    }
    
    // Inefficient bulk insert
    public async Task CreateManyBooks(List<Book> books)
    {
        // One-by-one insert
        foreach (var book in books)
        {
            await _context.Books.AddAsync(book);
            await _context.SaveChangesAsync();
        }
    }
}

// Invalid entity configuration
public class BadEntityConfiguration
{
    public static void Configure(ModelBuilder builder)
    {
        builder.Entity<Book>(b =>
        {
            // Missing schema and table prefix
            b.ToTable("Books");
            
            // Missing proper property configuration
            b.Property(x => x.Name);
            
            // Missing indexes
            // Missing relationships
            // Missing concurrency token
            // Missing value converters
        });
    }
}
```
</example> 