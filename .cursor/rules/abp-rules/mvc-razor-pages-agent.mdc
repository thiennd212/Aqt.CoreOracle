---
description: 
globs: 
alwaysApply: true
---
---
description: "This rule governs MVC and Razor Pages development in ABP Framework. Apply when:
(1) Creating new Razor Pages or MVC Controllers
(2) Implementing page models or controller actions
(3) Working with views and partial views
(4) Handling user input and form submissions
(5) Implementing client-side validation
(6) Creating or modifying UI components
(7) Implementing localization in views
(8) Working with form POST/GET operations
(9) Implementing view caching strategies
(10) Working with JavaScript/CSS in MVC applications"
globs: ""
alwaysApply: true
---

# MVC & Razor Pages Development Guidelines

## Critical Rules
- Sử dụng strongly-typed models cho tất cả Razor Pages và Views
- Implement IPageModel interface cho PageModel classes
- Sử dụng async/await cho tất cả các operations có thể
- Implement proper error handling với try-catch blocks và exception filters
- Sử dụng partial views cho các components được tái sử dụng
- Implement proper model validation với Data Annotations và FluentValidation
- Sử dụng Tag Helpers thay vì HTML Helpers
- Tách business logic ra khỏi PageModel handlers (OnGetAsync/OnPostAsync)
- Sử dụng proper dependency injection thông qua constructor
- Implement proper routing conventions với RouteAttribute
- Sử dụng [ValidateAntiForgeryToken] cho tất cả POST operations
- Implement proper model binding với [BindProperty], [BindNever], và [BindRequired]
- Sử dụng IStringLocalizer cho localization trong views
- Implement AutoMapper cho object mapping
- Áp dụng client-side validation kết hợp với server-side validation
- Sử dụng Response Caching hoặc Output Caching cho tăng performance
- Tránh ViewBag/ViewData/TempData, ưu tiên sử dụng strongly-typed models
- Implement proper authorization với [Authorize] attributes
- Sử dụng bundling và minification cho JavaScript và CSS resources
- Implement proper form submission với AJAX khi cần thiết
- Sử dụng ABP Dynamic Forms cho complex form scenarios

## Examples

<example>
```csharp
// Razor Page Model with proper practices
public class EditBookModel : PageModel
{
    private readonly IBookAppService _bookAppService;
    private readonly IAuthorizationService _authorizationService;
    private readonly IStringLocalizer<BookResource> _localizer;
    
    public EditBookModel(
        IBookAppService bookAppService,
        IAuthorizationService authorizationService,
        IStringLocalizer<BookResource> localizer)
    {
        _bookAppService = bookAppService;
        _authorizationService = authorizationService;
        _localizer = localizer;
    }
    
    [BindProperty]
    public UpdateBookDto Book { get; set; }
    
    [BindProperty(SupportsGet = true)]
    public Guid Id { get; set; }
    
    [BindNever]
    public List<SelectListItem> Authors { get; set; }
    
    [TempData]
    public string SuccessMessage { get; set; }
    
    public async Task<IActionResult> OnGetAsync()
    {
        try
        {
            // Authorization check
            if (!await _authorizationService.IsGrantedAsync(BookStorePermissions.Books.Edit))
            {
                return Forbid();
            }
            
            // Load data using application service
            Book = await _bookAppService.GetForEditAsync(Id);
            Authors = await _bookAppService.GetAuthorLookupAsync();
            
            return Page();
        }
        catch (EntityNotFoundException)
        {
            return NotFound();
        }
        catch (Exception ex)
        {
            // Proper error handling
            Logger.LogException(ex);
            return StatusCode(500);
        }
    }
    
    public async Task<IActionResult> OnPostAsync()
    {
        // Validation
        if (!ModelState.IsValid)
        {
            Authors = await _bookAppService.GetAuthorLookupAsync();
            return Page();
        }
        
        try
        {
            await _bookAppService.UpdateAsync(Id, Book);
            SuccessMessage = _localizer["BookUpdatedSuccessfully"];
            return RedirectToPage("./Index");
        }
        catch (AbpValidationException ex)
        {
            foreach (var error in ex.ValidationErrors)
            {
                ModelState.AddModelError(error.MemberNames.FirstOrDefault() ?? "", error.ErrorMessage);
            }
            
            Authors = await _bookAppService.GetAuthorLookupAsync();
            return Page();
        }
    }
    
    // AJAX handler
    public async Task<JsonResult> OnPostCheckNameAvailabilityAsync(string name)
    {
        var isAvailable = await _bookAppService.IsNameAvailableAsync(name, Id);
        return new JsonResult(isAvailable);
    }
}

// Partial View with proper localization and tag helpers
@model BookDto
@inject IStringLocalizer<BookResource> L

<div class="book-details">
    <abp-input asp-for="Name" label="@L["Name"]" />
    <abp-input asp-for="Price" label="@L["Price"]" />
    <abp-select asp-for="AuthorId" asp-items="@Model.Authors" label="@L["Author"]" />
    
    <div class="form-group">
        <label asp-for="PublishDate">@L["PublishDate"]</label>
        <abp-date-picker asp-for="PublishDate" />
        <span asp-validation-for="PublishDate" class="text-danger"></span>
    </div>
</div>

// Razor Page with client-side validation
@page "{id:guid}"
@model EditBookModel
@inject IStringLocalizer<BookResource> L
@{
    ViewData["Title"] = L["EditBook"];
}

<abp-card>
    <abp-card-header>
        <h2>@L["EditBook"]</h2>
    </abp-card-header>
    <abp-card-body>
        <form id="editBookForm" method="post" data-ajax="true" data-ajax-success="bookEditSucceeded">
            <abp-input asp-for="Book.Name" auto-focus="true" />
            
            <abp-input asp-for="Book.Price" />
            
            <abp-select asp-for="Book.AuthorId" asp-items="@Model.Authors" />
            
            <abp-input asp-for="Book.Description" textarea="true" />
            
            <abp-button button-type="Primary" type="submit" text="@L["Save"]" />
            <abp-button button-type="Secondary" asp-page="./Index" text="@L["Cancel"]" />
        </form>
    </abp-card-body>
</abp-card>

@section scripts {
    <abp-script src="/Pages/Books/Edit.js" />
    
    <script>
        function bookEditSucceeded() {
            abp.notify.success('@L["BookUpdatedSuccessfully"]');
            setTimeout(() => { window.location.href = '/Books' }, 1000);
        }
    </script>
}

// JavaScript file with AJAX validation
$(function () {
    var $form = $('#editBookForm');
    var $nameInput = $('#Book_Name');
    
    $form.data('validator').settings.rules = {
        'Book_Name': {
            required: true,
            rangelength: [3, 100],
            remote: {
                url: "/Books/Edit?handler=CheckNameAvailability",
                type: "POST",
                dataType: "json",
                data: {
                    name: function() {
                        return $nameInput.val();
                    }
                },
                headers: {
                    RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                }
            }
        }
    };
    
    $form.data('validator').settings.messages = {
        'Book_Name': {
            required: abp.localization.getResource('BookStore')('NameRequired'),
            rangelength: abp.localization.getResource('BookStore')('NameLength'),
            remote: abp.localization.getResource('BookStore')('NameAlreadyExists')
        }
    };
});

// Controller with proper practices
[Route("api/app/book")]
[Authorize(BookStorePermissions.Books.Default)]
public class BookController : AbpController, IBookAppService
{
    private readonly IBookAppService _bookAppService;
    
    public BookController(IBookAppService bookAppService)
    {
        _bookAppService = bookAppService;
    }
    
    [HttpGet]
    [ResponseCache(Duration = 30)]
    public async Task<ListResultDto<BookDto>> GetListAsync()
    {
        return await _bookAppService.GetListAsync();
    }
    
    [HttpGet("{id}")]
    public async Task<BookDto> GetAsync(Guid id)
    {
        return await _bookAppService.GetAsync(id);
    }
    
    [HttpPost]
    [ValidateAntiForgeryToken]
    [Authorize(BookStorePermissions.Books.Create)]
    public async Task<BookDto> CreateAsync(CreateBookDto input)
    {
        return await _bookAppService.CreateAsync(input);
    }
    
    [HttpPut("{id}")]
    [ValidateAntiForgeryToken]
    [Authorize(BookStorePermissions.Books.Edit)]
    public async Task<BookDto> UpdateAsync(Guid id, UpdateBookDto input)
    {
        return await _bookAppService.UpdateAsync(id, input);
    }
    
    [HttpDelete("{id}")]
    [ValidateAntiForgeryToken]
    [Authorize(BookStorePermissions.Books.Delete)]
    public async Task DeleteAsync(Guid id)
    {
        await _bookAppService.DeleteAsync(id);
    }
}
```
</example>

<example type="invalid">
```csharp
// Invalid Page Model
public class BadBookModel
{
    // Not inheriting from PageModel
    private readonly DbContext _context;
    
    // Direct database access in page model
    public async Task OnGet(int id)
    {
        var book = await _context.Books.FindAsync(id);
        // Missing error handling
    }
    
    // Missing async suffix
    public IActionResult OnPost()
    {
        // Missing validation
        // Missing anti-forgery token validation
        return RedirectToPage("Index");
    }
}

// Invalid View
@page
@model BadBookModel
@{
    // Using ViewBag instead of strongly-typed model
    ViewBag.Title = "Edit Book";
}

<div class="card">
    <div class="card-header">Edit Book</div>
    <div class="card-body">
        @using (Html.BeginForm()) // Should use Tag Helpers instead
        {
            @Html.TextBoxFor(m => m.Name) // Should use abp-input
            @Html.ValidationMessageFor(m => m.Name)
            
            <div class="form-group">
                <label>Price</label>
                <input type="text" name="Price" />
            </div>
            
            <input type="submit" value="Save" /> // Should use abp-button
        }
    </div>
</div>

// Invalid Controller
public class BadBookController : Controller
{
    private readonly ApplicationDbContext _context;
    
    public BadBookController(ApplicationDbContext context)
    {
        _context = context; // Direct database access
    }
    
    // Synchronous action
    public IActionResult Index()
    {
        var books = _context.Books.ToList(); // Not using async
        return View(books);
    }
    
    [HttpPost]
    // Missing ValidateAntiForgeryToken
    // Missing authorization
    public IActionResult Create(BookViewModel model)
    {
        if (ModelState.IsValid)
        {
            // Direct entity manipulation
            var book = new Book
            {
                Name = model.Name,
                Price = model.Price
            };
            
            _context.Books.Add(book);
            _context.SaveChanges(); // Not using async
            
            return RedirectToAction("Index");
        }
        
        return View(model);
    }
    
    // Hard-coded strings instead of localization
    public IActionResult Details(int id)
    {
        var book = _context.Books.Find(id);
        
        if (book == null)
        {
            ViewBag.ErrorMessage = "Book not found";
            return View("Error");
        }
        
        return View(book);
    }
}

// Invalid JavaScript
<script>
    // Hard-coded messages without localization
    $(function() {
        $("#createForm").submit(function() {
            if ($("#Name").val() === "") {
                alert("Name is required");
                return false;
            }
        });
        
        // Direct AJAX call without anti-forgery token
        $("#checkName").click(function() {
            $.ajax({
                url: "/api/book/check-name",
                type: "GET",
                data: { name: $("#Name").val() },
                success: function(result) {
                    if (!result) {
                        alert("Name already exists");
                    }
                }
            });
        });
    });
</script>
```
</example> 