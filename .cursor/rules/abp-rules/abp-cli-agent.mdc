---
description: 
globs: 
alwaysApply: false
---
---
description: "This rule governs ABP CLI usage in free version. Apply when:
(1) Creating new ABP solutions
(2) Adding modules to existing solutions
(3) Updating ABP packages
(4) Managing ABP solutions
(5) Working with ABP templates
(6) Creating new entities
(7) Adding features to existing projects"
globs: ""
alwaysApply: false
---

# ABP CLI Guidelines

```mermaid
graph TD
    A[ABP CLI] --> B[New Solution]
    A --> C[Update]
    A --> D[Add Module]
    A --> E[Add Package]
    B --> F[Application]
    B --> G[Module]
    F --> H[MVC]
    F --> I[API]
    F --> J[Database]
    J --> K[SQL Server]
    J --> L[MySQL]
    J --> M[PostgreSQL]
    J --> N[Oracle]
    J --> O[SQLite]
```

## Critical Rules
- Cài đặt ABP CLI thông qua dotnet tool install -g Volo.Abp.Cli
- Luôn kiểm tra version mới nhất của ABP CLI với abp check-update
- Sử dụng abp new cho tạo solution mới
- Chọn đúng template phù hợp với yêu cầu (app/module)
- Sử dụng --ui framework để chọn UI (mvc, angular, blazor)
- Sử dụng --database-provider để chọn database (ef, mongodb)
- Sử dụng --dbms để chọn database management system
- Sử dụng --mobile framework cho mobile development
- Implement đúng cấu trúc thư mục theo template
- Update packages với abp update
- Sử dụng abp add-module để thêm module
- Sử dụng abp add-package để thêm package
- Generate code với abp generate-proxy
- Clean solution với abp clean
- Switch to nightly builds khi cần test features mới
- Sử dụng --version để chọn specific version
- Tránh modify files được generate bởi template

## Examples

<example>
```bash
# Create new solution with SQL Server
abp new Acme.BookStore -t app -u mvc --database-provider ef --dbms SqlServer --mobile none --version 7.4.0

# Create new solution with MySQL
abp new Acme.BookStore -t app -u mvc --database-provider ef --dbms MySQL --mobile none --version 7.4.0

# Create new solution with PostgreSQL
abp new Acme.BookStore -t app -u mvc --database-provider ef --dbms PostgreSQL --mobile none --version 7.4.0

# Create new solution with Oracle
abp new Acme.BookStore -t app -u mvc --database-provider ef --dbms Oracle --mobile none --version 7.4.0

# Create new solution with SQLite
abp new Acme.BookStore -t app -u mvc --database-provider ef --dbms SQLite --mobile none --version 7.4.0

# Project structure
Acme.BookStore
  ├── src
  │   ├── Acme.BookStore.Domain
  │   ├── Acme.BookStore.Domain.Shared
  │   ├── Acme.BookStore.Application
  │   ├── Acme.BookStore.Application.Contracts
  │   ├── Acme.BookStore.EntityFrameworkCore
  │   ├── Acme.BookStore.Web
  │   └── Acme.BookStore.DbMigrator
  └── test
      ├── Acme.BookStore.Domain.Tests
      ├── Acme.BookStore.Application.Tests
      └── Acme.BookStore.Web.Tests

# Add module
abp add-module Volo.Blogging --solution-path Acme.BookStore.sln

# Update ABP packages
abp update --solution-path Acme.BookStore.sln

# Generate proxy
abp generate-proxy -t csharp -u http://localhost:44311

# Create new entity
abp add-crud-page Book --solution-path Acme.BookStore.sln

# Switch to nightly builds
abp switch-to-nightly
```

```csharp
// Module configuration after adding with CLI
[DependsOn(typeof(AbpBloggingModule))]
public class BookStoreWebModule : AbpModule
{
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        // Auto-configured by ABP CLI
        Configure<AbpBloggingOptions>(options =>
        {
            options.IsEnabled = true;
        });
    }
}

// Entity created by CLI
public class Book : FullAuditedAggregateRoot<Guid>
{
    public string Name { get; set; }
    public BookType Type { get; set; }
    public float Price { get; set; }
    
    private Book() { }
    
    internal Book(
        Guid id,
        string name,
        BookType type,
        float price
    ) : base(id)
    {
        Name = name;
        Type = type;
        Price = price;
    }
}

// Generated DbContext configuration
public static class BookStoreDbContextModelCreatingExtensions
{
    public static void ConfigureBookStore(
        this ModelBuilder builder)
    {
        builder.Entity<Book>(b =>
        {
            b.ToTable(BookStoreConsts.DbTablePrefix + "Books",
                BookStoreConsts.DbSchema);
            
            b.ConfigureByConvention();
            
            b.Property(x => x.Name)
                .IsRequired()
                .HasMaxLength(128);
        });
    }
}
```
</example>

<example type="invalid">
```bash
# Invalid solution creation without dbms
abp new MyApp -t app # Missing --dbms parameter

# Invalid solution creation with wrong dbms
abp new MyApp -t app --dbms wrongdb # Invalid dbms value

# Wrong module addition
abp add-module Volo.Blogging # Missing solution path

# Invalid update command
abp update # Missing solution path

# Wrong proxy generation
abp generate-proxy # Missing type and URL

# Invalid entity creation
abp add-crud Book # Missing solution path
```

```csharp
// Invalid module configuration after CLI
public class BadModule : AbpModule
{
    // Missing DependsOn attribute
    // Missing proper configuration
    
    public override void ConfigureServices(ServiceConfigurationContext context)
    {
        // Hard-coded configuration instead of using options pattern
        var options = new BloggingOptions
        {
            IsEnabled = true
        };
    }
}

// Invalid entity structure
public class BadBook
{
    // Not using ABP entity base class
    public Guid Id { get; set; }
    public string Name { get; set; }
    
    // Missing proper constructor
    public BadBook(string name)
    {
        Id = Guid.NewGuid();
        Name = name;
    }
}

// Invalid DbContext configuration
public class BadDbContext : DbContext
{
    // Not using ABP conventions
    public DbSet<BadBook> Books { get; set; }
    
    protected override void OnModelCreating(ModelBuilder builder)
    {
        // Missing ConfigureByConvention
        builder.Entity<BadBook>(b =>
        {
            b.ToTable("Books"); // Missing prefix and schema
        });
    }
}
```
</example> 