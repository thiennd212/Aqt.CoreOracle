---
description: 
globs: 
alwaysApply: true
---
---
description: "This rule governs security implementation in ABP applications. Apply when:
(1) Implementing authentication and authorization
(2) Working with sensitive data
(3) Implementing input validation
(4) Setting up API security
(5) Implementing CSRF/XSRF protection
(6) Managing user permissions
(7) Working with identity management
(8) Implementing secure communication"
globs: ""
alwaysApply: false
---

# ABP Security Implementation Guidelines

## Critical Rules
- Implement proper input validation và sanitization
- Sử dụng ABP's built-in anti-forgery token protection
- Encrypt sensitive data at rest và in transit
- Regularly update dependencies để patch known vulnerabilities
- Implement proper HTTPS với certificate validation
- Sử dụng ABP's permission system cho fine-grained access control
- Implement proper password hashing và storage
- Sử dụng AntiForgeryTokens cho form submissions
- Implement proper CORS policies
- Sử dụng ABP ExceptionHandling cho secure error pages
- Implement proper logging cho security events
- Sử dụng strong authentication mechanisms (Multi-factor authentication)
- Implement proper session management
- Tránh hard-coded secrets trong code
- Implement proper API authentication với JWT/OAuth

## Examples

<example>
```csharp
// Permission definitions
public class BookStorePermissionDefinitionProvider : PermissionDefinitionProvider
{
    public override void Define(IPermissionDefinitionContext context)
    {
        var bookStoreGroup = context.AddGroup(BookStorePermissions.GroupName);

        var booksPermission = bookStoreGroup.AddPermission(BookStorePermissions.Books.Default);
        booksPermission.AddChild(BookStorePermissions.Books.Create);
        booksPermission.AddChild(BookStorePermissions.Books.Edit);
        booksPermission.AddChild(BookStorePermissions.Books.Delete);
    }
}

// Authorization in service
[Authorize(BookStorePermissions.Books.Default)]
public class BookAppService : ApplicationService, IBookAppService
{
    private readonly IRepository<Book, Guid> _bookRepository;
    
    public BookAppService(IRepository<Book, Guid> bookRepository)
    {
        _bookRepository = bookRepository;
    }
    
    public async Task<BookDto> GetAsync(Guid id)
    {
        var book = await _bookRepository.GetAsync(id);
        return ObjectMapper.Map<Book, BookDto>(book);
    }
    
    [Authorize(BookStorePermissions.Books.Create)]
    public async Task<BookDto> CreateAsync(CreateBookDto input)
    {
        // Input validation
        if (string.IsNullOrEmpty(input.Name))
        {
            throw new AbpValidationException("Name cannot be empty");
        }
        
        var book = await _bookManager.CreateAsync(
            input.Name,
            input.AuthorId,
            input.Price
        );
        
        return ObjectMapper.Map<Book, BookDto>(book);
    }
    
    [Authorize(BookStorePermissions.Books.Edit)]
    public async Task<BookDto> UpdateAsync(Guid id, UpdateBookDto input)
    {
        // Check authorization for specific book
        await AuthorizationService.CheckAsync(BookStorePermissions.Books.Edit);
        
        var book = await _bookRepository.GetAsync(id);
        
        book.SetName(input.Name);
        book.Price = input.Price;
        
        await _bookRepository.UpdateAsync(book);
        
        return ObjectMapper.Map<Book, BookDto>(book);
    }
}

// CSRF protection in controller
[Route("api/books")]
public class BookController : AbpController, IBookAppService
{
    private readonly IBookAppService _bookAppService;
    
    public BookController(IBookAppService bookAppService)
    {
        _bookAppService = bookAppService;
    }
    
    [HttpGet]
    public async Task<ListResultDto<BookDto>> GetListAsync()
    {
        return await _bookAppService.GetListAsync();
    }
    
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<BookDto> CreateAsync(CreateBookDto input)
    {
        return await _bookAppService.CreateAsync(input);
    }
}

// Securely storing sensitive data
public class SecretProvider : ISecretProvider
{
    private readonly IConfiguration _configuration;
    private readonly IDataProtector _dataProtector;
    
    public SecretProvider(
        IConfiguration configuration,
        IDataProtectionProvider dataProtectionProvider)
    {
        _configuration = configuration;
        _dataProtector = dataProtectionProvider.CreateProtector("SecretProtection");
    }
    
    public string GetApiKey()
    {
        var encryptedKey = _configuration["ApiKey"];
        return _dataProtector.Unprotect(encryptedKey);
    }
}

// Secure CORS policy
public override void ConfigureServices(ServiceConfigurationContext context)
{
    var configuration = context.Services.GetConfiguration();
    
    context.Services.AddCors(options =>
    {
        options.AddDefaultPolicy(builder =>
        {
            builder
                .WithOrigins(
                    configuration["App:CorsOrigins"]
                        .Split(",", StringSplitOptions.RemoveEmptyEntries)
                        .Select(o => o.Trim().RemovePostFix("/"))
                        .ToArray()
                )
                .WithAbpExposedHeaders()
                .SetIsOriginAllowedToAllowWildcardSubdomains()
                .AllowAnyHeader()
                .AllowAnyMethod()
                .AllowCredentials();
        });
    });
}
```
</example>

<example type="invalid">
```csharp
// Missing permission definitions
public class BadBookService
{
    private readonly IRepository<Book, Guid> _bookRepository;
    
    public BadBookService(IRepository<Book, Guid> bookRepository)
    {
        _bookRepository = bookRepository;
    }
    
    // Missing authorization
    public async Task<BookDto> GetBook(Guid id)
    {
        var book = await _bookRepository.GetAsync(id);
        return ObjectMapper.Map<Book, BookDto>(book);
    }
    
    // Insufficient input validation
    public async Task<BookDto> CreateBook(CreateBookDto input)
    {
        // Missing validation
        var book = new Book(GuidGenerator.Create(), input.Name, input.AuthorId, input.Price);
        await _bookRepository.InsertAsync(book);
        
        return ObjectMapper.Map<Book, BookDto>(book);
    }
}

// Insecure controller
[Route("api/books")]
public class BadBookController : ControllerBase
{
    private readonly BadBookService _bookService;
    
    public BadBookController(BadBookService bookService)
    {
        _bookService = bookService;
    }
    
    [HttpGet]
    // Missing authorization
    public async Task<List<BookDto>> GetList()
    {
        return await _bookService.GetAllBooks();
    }
    
    [HttpPost]
    // Missing CSRF protection
    // Missing input validation
    public async Task<BookDto> Create(CreateBookDto input)
    {
        return await _bookService.CreateBook(input);
    }
}

// Insecure storage of sensitive data
public class BadSecretProvider
{
    public string GetApiKey()
    {
        // Hard-coded secret
        return "sk_live_abcdefghijklmnopqrstuvwxyz";
    }
}

// Insecure CORS policy
public override void ConfigureServices(ServiceConfigurationContext context)
{
    context.Services.AddCors(options =>
    {
        options.AddDefaultPolicy(builder =>
        {
            builder
                .AllowAnyOrigin() // Too permissive
                .AllowAnyHeader()
                .AllowAnyMethod();
        });
    });
}
```
</example>
</rewritten_file>