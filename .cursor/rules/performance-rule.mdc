---
description: 
globs: 
alwaysApply: true
---
# Rule: T·ªëi ∆∞u hi·ªáu nƒÉng to√†n d·ª± √°n ABP Framework

## Context

Hi·ªáu nƒÉng l√† y·∫øu t·ªë s·ªëng c√≤n c·ªßa h·ªá th·ªëng ·ªü m√¥i tr∆∞·ªùng production.  
ABP Framework h·ªó tr·ª£ nhi·ªÅu c√¥ng c·ª• m·∫°nh nh∆∞ EF Core, async/await, caching ‚Äì nh∆∞ng c·∫ßn tu√¢n th·ªß c√°c nguy√™n t·∫Øc ƒë√∫ng ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g√¢y bottleneck, leak ho·∫∑c ch·∫≠m kh√¥ng ƒë√°ng c√≥.

## Requirements

### ‚ö° EF Core / Repository

- ‚úÖ Lu√¥n s·ª≠ d·ª•ng `AsNoTracking()` n·∫øu kh√¥ng c·∫ßn update d·ªØ li·ªáu
- ‚úÖ D√πng `GetDbSetAsync()` thay v√¨ `DbContext.Entities`
- ‚úÖ Tr√°nh `.ToList()` tr∆∞·ªõc `.Where()` (ph·∫£i filter tr∆∞·ªõc r·ªìi m·ªõi load)
- ‚úÖ Lu√¥n gi·ªõi h·∫°n `.Take(...)` khi truy xu·∫•t danh s√°ch
- ‚úÖ T√°ch nh·ªè `.Include()` n·∫øu c√≥ nhi·ªÅu t·∫ßng (tr√°nh Include s√¢u + N+1 query)
- ‚ùå Kh√¥ng vi·∫øt truy v·∫•n SQL raw inline (d·ªÖ leak, kh√≥ test, kh√≥ caching)

### üß† Application / AppService

- ‚úÖ D√πng DTO ƒë·ªÉ return thay v√¨ return entity tr·ª±c ti·∫øp
- ‚úÖ D√πng `ObjectMapper.Map<T>` thay v√¨ t·ª± map
- ‚úÖ D√πng `ICurrentUser` ƒë·ªÉ l·∫•y th√¥ng tin user
- ‚ùå Kh√¥ng g·ªçi l·ªìng nhi·ªÅu AppService
- ‚ùå Kh√¥ng load to√†n b·ªô entity r·ªìi filter b·∫±ng LINQ

### üßµ Async/Await

- ‚úÖ ∆Øu ti√™n `Task.WhenAll()` khi g·ªçi nhi·ªÅu service ƒë·ªôc l·∫≠p
- ‚úÖ Lu√¥n `await` ƒë√∫ng context ‚Äì kh√¥ng d√πng `.Result` ho·∫∑c `.Wait()`
- ‚ùå Kh√¥ng d√πng async void tr·ª´ s·ª± ki·ªán UI

### üíæ Caching

- ‚úÖ S·ª≠ d·ª•ng `ICacheManager` ho·∫∑c `IDistributedCache` n·∫øu d·ªØ li·ªáu √≠t thay ƒë·ªïi
- ‚úÖ C√≥ invalidate cache r√µ r√†ng khi c·∫≠p nh·∫≠t
- ‚ùå Kh√¥ng l·∫°m d·ª•ng cache trong transaction logic

### üîê Security & Logging

- ‚úÖ Kh√¥ng log `InnerException` ra response ng∆∞·ªùi d√πng
- ‚úÖ Kh√¥ng log `AccessToken`, `Password`, `ConnectionString`
- ‚úÖ G·∫Øn `[DisableAuditing]` v√†o action thao t√°c l·ªõn ho·∫∑c upload file

## Examples

### ‚úÖ V√≠ d·ª• t·ªët

```csharp
var orders = (await GetDbSetAsync())
    .AsNoTracking()
    .Where(x => x.Status == OrderStatus.Active)
    .OrderByDescending(x => x.CreationTime)
    .Take(100)
    .ToList();
```

```csharp
public async Task<List<UserDto>> LoadAsync()
{
    var users = await _userRepo.GetListAsync();
    return ObjectMapper.Map<List<AppUser>, List<UserDto>>(users);
}
```

### ‚ùå V√≠ d·ª• sai

```csharp
// ‚ùå Kh√¥ng d√πng AsNoTracking, load c·∫£ b·∫£ng r·ªìi filter
var all = await _context.Orders.ToListAsync();
return all.Where(x => x.Status == OrderStatus.Active).ToList();

// ‚ùå G·ªçi AppService trong AppService
await _customerAppService.CreateAsync(customer); // Kh√¥ng n√™n g·ªçi nh∆∞ v·∫≠y

// ‚ùå Kh√¥ng gi·ªõi h·∫°n Take
return await _repo.GetListAsync(); // D·ªØ li·ªáu l·ªõn g√¢y qu√° t·∫£i

// ‚ùå Map tay th·ªß c√¥ng
var dto = new UserDto { Name = entity.Name, Age = entity.Age }; // d·ªÖ thi·∫øu field
```
