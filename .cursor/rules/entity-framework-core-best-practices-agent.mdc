---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule when working with data access logic using Entity Framework Core (EF Core) within an ABP Framework project. This includes defining DbContexts, configuring entities, using migrations, implementing repositories (generic or custom), and performing database operations (queries, inserts, updates, deletes). Focus on leveraging ABP's repository pattern and async operations.
globs: **/*.cs
alwaysApply: true
---

# Entity Framework Core Best Practices (ABP)

## Critical Rules

- **ABP Repository Pattern:** Strongly prefer using ABP's generic repositories (`IRepository<TEntity, TKey>`, `IBasicRepository<TEntity, TKey>`) or inherit from them (`EfCoreRepository`) for standard data access operations. Avoid direct `DbContext` usage in Application Services or Domain Services unless absolutely necessary for complex scenarios not covered by repositories.
- **Custom Repositories:** For queries beyond the generic repository methods, create custom repository interfaces (e.g., `IProductRepository`) inheriting from `IRepository` and implement them in the `.EntityFrameworkCore` project.
- **Async Operations:** Always use asynchronous EF Core methods (`ToListAsync`, `FirstOrDefaultAsync`, `SaveChangesAsync`, `AddAsync`, `UpdateAsync`, etc.) and `async/await` throughout the call stack for database operations to avoid blocking threads.
- **Migrations:** Use EF Core migrations (`abp add-migration`, `abp update-database`) managed via the ABP CLI for all database schema changes. Avoid manual database alterations.
- **DbContext Configuration:** Configure entities, relationships, indexes, and constraints within the `OnModelCreating` method of your `DbContext` or using `IEntityTypeConfiguration<TEntity>`. Leverage ABP conventions where possible.
- **Query Efficiency:** Write efficient LINQ queries. Avoid N+1 problems (use `Include`/`ThenInclude` judiciously). Use `AsNoTracking()` for read-only queries where change tracking is not needed. Project data into DTOs (`Select`) as early as possible to minimize data transfer.
- **Unit of Work (UOW):** Understand and leverage ABP's automatic UOW management. Database changes within a UOW (e.g., an Application Service method) are typically saved together automatically by ABP. Avoid manual `SaveChangesAsync()` calls in most application/domain logic.

## Examples

<example>
  // Assuming: using Volo.Abp.Domain.Repositories;
  // Assuming: using System.Linq;
  // Assuming: using System.Threading.Tasks;
  // Assuming: using Microsoft.EntityFrameworkCore; // For Include, AsNoTracking etc.

  // Custom Repository Interface (in .Domain project)
  public interface IProductRepository : IRepository<Product, Guid>
  {
      Task<List<Product>> GetFeaturedProductsAsync(int maxCount);
      Task<List<Product>> FindByNameAsync(string name);
  }
  
  // Custom Repository Implementation (in .EntityFrameworkCore project)
  public class EfCoreProductRepository : EfCoreRepository<MyDbContext, Product, Guid>, IProductRepository
  {
      public EfCoreProductRepository(IDbContextProvider<MyDbContext> dbContextProvider) 
          : base(dbContextProvider) { }

      public async Task<List<Product>> GetFeaturedProductsAsync(int maxCount)
      {
          var dbSet = await GetDbSetAsync();
          // Example custom query using EF Core async methods
          return await dbSet
              .Where(p => p.IsFeatured) 
              .OrderByDescending(p => p.CreationTime)
              .Take(maxCount)
              .ToListAsync(); // Async query execution
      }
      
      public async Task<List<Product>> FindByNameAsync(string name)
      {
            var dbSet = await GetDbSetAsync();
            // Using AsNoTracking for a read-only query projection
            return await dbSet.Where(p => p.Name.Contains(name))
                              .AsNoTracking() 
                              .ToListAsync();
      }

      // Example overriding a standard method to add Include
      public override async Task<IQueryable<Product>> WithDetailsAsync()
      {
          return (await GetQueryableAsync()).Include(p => p.Category); // Eager loading Category
      }
  }

  // Usage in an Application Service (inject IProductRepository)
  public class ProductAppService : ApplicationService
  {
      private readonly IProductRepository _productRepository;

      public ProductAppService(IProductRepository productRepository)
      {
          _productRepository = productRepository;
      }

      public async Task<List<ProductDto>> GetFeaturedAsync()
      {
          var products = await _productRepository.GetFeaturedProductsAsync(5); // Using custom repo method
          return ObjectMapper.Map<List<Product>, List<ProductDto>>(products);
          // SaveChangesAsync is NOT called here - handled by ABP UOW
      }
       public async Task<ProductWithCategoryDto> GetProductWithCategory(Guid id)
        {
            // Use WithDetailsAsync (which includes Category)
            var product = await _productRepository.GetAsync(id); // This might use the overridden WithDetailsAsync if configured
            // Alternatively, explicitly call it if needed:
            // var productQuery = await _productRepository.WithDetailsAsync();
            // var product = await AsyncExecuter.FirstOrDefaultAsync(productQuery.Where(p => p.Id == id));

            if (product == null) return null; // Handle not found

            // Assuming ProductWithCategoryDto includes Category details
            return ObjectMapper.Map<Product, ProductWithCategoryDto>(product); 
        }
  }
</example>

<example type="invalid">
  // In an Application Service
  public class BadProductService : ApplicationService
  {
      private readonly MyDbContext _dbContext; // Direct DbContext injection - Bad Practice

      public BadProductService(MyDbContext dbContext) { _dbContext = dbContext; }

      public List<ProductDto> GetProductsByName(string name) 
      {
          // Synchronous database call - Bad Practice
          var products = _dbContext.Products.Where(p => p.Name == name).ToList(); 
          
          // Manual mapping within App Service (better to use ObjectMapper)
          // ... mapping logic ...
          
          return ManualMapToDto(products); 
      }

      public void UpdateProductName(Guid id, string newName)
      {
          var product = _dbContext.Products.Find(id); // Synchronous Find
          if(product != null)
          {
              product.SetName(newName); // Assuming SetName is a method on Product
              _dbContext.SaveChanges(); // Manual SaveChanges - Usually unnecessary due to ABP UOW
          }
      }
      
        public List<ProductDto> GetProductsAndCategoriesLegacy()
        {
            var products = _dbContext.Products.ToList(); // Fetch all products
            var result = new List<ProductDto>();
            foreach(var product in products)
            {
                // N+1 Query Problem: Separate query for each product's category
                var category = _dbContext.Categories.FirstOrDefault(c => c.Id == product.CategoryId); 
                var dto = MapToDtoWithCategory(product, category);
                result.Add(dto);
            }
            return result;
        }
  }
</example>
