---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule when discussing or implementing core ABP Framework concepts like modularity, domain-driven design (DDD), built-in features (authorization, auditing), or using ABP CLI code generation. This is relevant for architectural decisions, feature implementation, and project structuring within an ABP solution. Focus on using audited aggregate roots like FullAuditedAggregateRoot where applicable.
globs: **/*.cs 
alwaysApply: true
---

# ABP Framework Best Practices

## Critical Rules

- **Modularity:** Structure the application using ABP modules (e.g., `.Domain`, `.Application`, `.EntityFrameworkCore`, `.HttpApi`).
- **DDD:** Apply Domain-Driven Design principles (Entities, Aggregates, Repositories, Domain Services, Value Objects). Prefer using audited aggregate roots (e.g., `FullAuditedAggregateRoot<TKey>`, `AuditedAggregateRoot<TKey>`) where appropriate to leverage built-in auditing. Use concise type names assuming necessary `using` directives.
- **Built-in Features:** Utilize ABP's conventions and features (e.g., `[Authorize]`, `IAuditingStore`, dependency injection, validation, Unit of Work, Auditing).
- **Code Generation:** Use `abp generate` commands for repetitive tasks (e.g., creating CRUD pages, services).

## Examples

<example>
  // Assuming: using Volo.Abp.Domain.Entities.Auditing;
  // Assuming: using Volo.Abp.Domain.Repositories;
  // Assuming: using Volo.Abp.Application.Services;
  // Assuming: using System; etc.

  // In MyProject.Domain project/module:
  // Inheriting from FullAuditedAggregateRoot to get CreationTime, CreatorId, etc.
  public class Product : FullAuditedAggregateRoot<Guid> 
  { 
    public string Name { get; private set; }
    public decimal Price { get; private set; }
    // ... other properties, methods ... 
    
    private Product() { /* Required by ORM */ }

    public Product(Guid id, string name, decimal price) : base(id) 
    { 
      Name = Check.NotNullOrWhiteSpace(name, nameof(name)); 
      SetPrice(price);
    }

    public void SetPrice(decimal price)
    {
        if (price < 0)
        {
            throw new ArgumentException("Price cannot be negative.", nameof(price));
        }
        Price = price;
    }
    
    // Auditing properties are automatically handled by ABP
  }
  
  // In MyProject.Application project/module:
  // Using CrudAppService for boilerplate CRUD operations
  public class ProductAppService : CrudAppService<Product, ProductDto, Guid, GetProductListDto, CreateUpdateProductDto>, IProductAppService 
  {
    public ProductAppService(IRepository<Product, Guid> repository) : base(repository)
    {
        // Define permissions if needed
        // GetPolicyName = MyProjectPermissions.Products.Default; 
        // ... other permissions
    }
    // Base CrudAppService handles standard CRUD, UOW, validation, mapping, authorization (if policies set)
  }
</example>

<example type="invalid">
  // Assuming: using Volo.Abp.Domain.Entities;
  
  // Not leveraging built-in auditing or DDD correctly
  public class LegacyProduct : AggregateRoot<Guid> // Using basic AggregateRoot when auditing is needed
  {
      public string Name { get; set; } // Public setter violates encapsulation
      // Missing auditing properties (CreationTime, CreatorId, etc.)
      public DateTime CreatedManually { get; set; } // Manual auditing property

      public LegacyProduct(Guid id, string name) : base(id) 
      {
          Name = name; 
          CreatedManually = DateTime.UtcNow; // Manual tracking required
      }
  }

  // Mixing concerns and manual DB operations
  public class BadProductAppService : ApplicationService 
  {
      private readonly MyDbContext _dbContext; 
      public BadProductAppService(MyDbContext dbContext) { _dbContext = dbContext; }

      public void CreateProduct(string name) 
      {
          // Not using Repository or UOW
          var product = new LegacyProduct(Guid.NewGuid(), name); 
          _dbContext.Set<LegacyProduct>().Add(product);
          _dbContext.SaveChanges(); // Manual SaveChanges, outside of ABP UOW
      }
  }
</example>
