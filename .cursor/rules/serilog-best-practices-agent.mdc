---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule when configuring or utilizing Serilog for logging within an ABP Framework application. This includes setting up Serilog sinks (file, console, database, etc.), configuring log levels, using structured logging properties, enriching log events, and writing log messages effectively in application code.
globs: **/*.cs, appsettings.json
alwaysApply: true
---

# Serilog Best Practices (ABP)

## Critical Rules

- **Configuration:** Configure Serilog in `Program.cs` (Minimal API) or `Startup.cs`, typically reading settings from `appsettings.json`. Use the `UseSerilog()` extension method.
- **Structured Logging:** Write log messages using message templates with named placeholders (`{PropertyName}`) rather than string interpolation (`$"{variable}"`). This allows sinks to capture the property values separately.
- **Multiple Sinks:** Configure multiple sinks as needed (e.g., `Console`, `File`, `Seq`, `ApplicationInsights`, database sinks) to route logs to different destinations based on environment or requirements.
- **Log Levels:** Use appropriate log levels (`Verbose`, `Debug`, `Information`, `Warning`, `Error`, `Fatal`) to control the verbosity of logs. Configure minimum levels per source or globally in `appsettings.json`.
- **Enrichment:** Utilize Serilog enrichers (`FromLogContext`, `WithMachineName`, `WithThreadId`, `WithCorrelationId` - often configured by ABP, etc.) to add contextual information automatically to all log events. Push properties onto the `LogContext` (`LogContext.PushProperty`) for request-specific context.
- **Log Context:** Inject `ILogger<TCategoryName>` into your classes. Serilog automatically uses the class name (`TCategoryName`) as the `SourceContext`.
- **Exception Logging:** Log exceptions directly as the exception parameter in logging methods (`_logger.LogError(ex, "An error occurred...")`). Serilog captures stack traces and details automatically.

## Examples

<example>
  // Configuring Serilog in Program.cs (Minimal API example)
  /*
  // using Serilog;
  // using Serilog.Events;
  // using Serilog.Extensions.Logging;

  public class Program
  {
      public static async Task<int> Main(string[] args)
      {
          Log.Logger = new LoggerConfiguration()
  #if DEBUG
              .MinimumLevel.Debug()
  #else
              .MinimumLevel.Information()
  #endif
              .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
              .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Warning)
              .Enrich.FromLogContext() // Essential for context properties
              .Enrich.WithProperty("Application", "MyAwesomeApp") // Example enricher
              .WriteTo.Async(c => c.Console()) // Async console sink
              .WriteTo.Async(c => c.File("Logs/logs.txt", rollingInterval: RollingInterval.Day)) // Async file sink
              // .WriteTo.Seq("http://localhost:5341") // Example Seq sink
              .CreateLogger();

          try
          {
              Log.Information("Starting web host.");
              var builder = WebApplication.CreateBuilder(args);
              
              builder.Host.AddAppSettingsSecretsJson()
                  .UseAutofac()
                  .UseSerilog(); // Integrate Serilog with Microsoft.Extensions.Logging
                  
              await builder.AddApplicationAsync<MyProjectWebModule>();
              var app = builder.Build();
              await app.InitializeApplicationAsync();
              await app.RunAsync();
              return 0;
          }
          catch (Exception ex)
          {
              Log.Fatal(ex, "Host terminated unexpectedly!");
              return 1;
          }
          finally
          {
              Log.CloseAndFlush();
          }
      }
  }
  */

  // Using ILogger in a service with structured logging and context
  /*
  public class MyService : ITransientDependency
  {
      private readonly ILogger<MyService> _logger;

      public MyService(ILogger<MyService> logger)
      {
          _logger = logger;
      }

      public void DoSomething(Guid entityId, string userAction)
      {
          // Structured logging: Properties 'EntityId' and 'UserAction' are captured
          _logger.LogInformation("Processing action {UserAction} for entity {EntityId}", userAction, entityId); 
          
          try
          {
              // ... potentially failing operation ...
              if (userAction == "delete") 
              {
                 using(LogContext.PushProperty("OperationType", "CriticalDelete")) // Add context for this operation
                 {
                     _logger.LogWarning("Attempting critical delete for {EntityId}", entityId);
                     // ... delete logic ... 
                     _logger.LogInformation("Critical delete successful for {EntityId}", entityId);
                 }
              }
          }
          catch (Exception ex)
          {
              // Logging the exception object directly
              _logger.LogError(ex, "Failed to process action {UserAction} for entity {EntityId}", userAction, entityId); 
          }
      }
  }
  */
</example>

<example type="invalid">
  // Using string interpolation instead of message templates
  /*
  _logger.LogInformation($"Processing action {userAction} for entity {entityId}"); 
  // PROBLEM: userAction and entityId are just part of the string message, not captured as structured properties.
  */
  
  // Logging exception message instead of the exception object
  /*
  catch(Exception ex)
  {
      _logger.LogError($"An error occurred: {ex.Message}"); 
      // PROBLEM: Loses stack trace and other exception details that Serilog would capture automatically.
  }
  */

  // Lack of configuration or only basic configuration
  /*
  // Forgetting to call UseSerilog() or only configuring Console sink without levels/enrichment.
  // Results in default logging or poorly formatted/contextualized logs.
  */
</example>